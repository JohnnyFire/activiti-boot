package com.sky.demo.activitidemo;



import com.sky.demo.activitidemo.service.ActService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SpringBootTest
class ActivitiDemoApplicationTests {
    @Autowired
    ActService actService;
    @Autowired
    RuntimeService runtimeService;
    @Autowired
    private TaskService taskService;


    /**
     * 启动流程
     */
    @Test
    public void TestStartProcess() {
        // 1. 查询流程定义列表 -- 这里相当于展示所有可以发起的流程。需要定义一个表，用来存储某类用户角色能够发起某类流程。
        List<ProcessDefinition> processDefinitionList = actService.getAllProcessDefinition();
        processDefinitionList.forEach(System.out::println);
        ProcessDefinition processDefinition = processDefinitionList.get(0);
        // 选择某一个流程类，启动一个流程。
        String businessKey="b1";
        Map<String, Object> map=new HashMap<>();
        // 如果流程的执行过程中，没有选择多个人可以完成某个流程的情况。可以指定流程变量。
        map.put("applicant","zhangsan");
        actService.startProcess(processDefinition.getId(),businessKey,map);

    }

    /**
     * 通过用户id查找流程。
     */
    @Test
    public void findTasksByUserId() {
        String userId ="zhangsan";
        List<Task> resultTask = taskService.createTaskQuery().taskCandidateOrAssigned(userId).list();
        System.out.println("任务列表："+resultTask);
        // 任务列表里面。创建一个查询。通过流程id，获取指定类型的流程。
        String processInstanceId = resultTask.get(0).getProcessInstanceId();
        System.out.println("流程实例Id："+processInstanceId);
    }
    /**
     * 完成个人任务
     */
    @Test
    public void completTask() {
        // 流程定义的key
        String key = "myevection";
        // 完成任务
        List<Task> list = taskService.createTaskQuery()
                .processDefinitionKey(key)
                .taskCandidateOrAssigned("zhangsan")
                .list();
        Task task = list.get(0);
        String processInstanceId = null;
        if (task != null) {
            // 根据任务id来 完成任务。
            //taskService.addCandidateUser(task.getId(),"lisi");
            //taskService.addCandidateUser(task.getId(),"wangwu");
            processInstanceId = task.getProcessInstanceId();
            System.out.println("流程实例id1:"+processInstanceId);
            taskService.complete(task.getId());
            String processInstanceId1 = task.getProcessInstanceId();
            System.out.println("流程实例id2:"+processInstanceId1);
            System.out.println();
            System.out.println("任务已完成：" + task.getId());
            List<Task> list1 = taskService.createTaskQuery().processInstanceId(processInstanceId).list();
            if (list1.size()>0){
                Task task1 = list1.get(0);
                taskService.addCandidateUser(task1.getId(),"lisi");
                taskService.addCandidateUser(task1.getId(),"wangwu");
            }
        }

    }
    /**
     * 候选人拾取任务
     */
    @Test
    public void claimTask(){

        3. 当前任务的id
        //String taskId = "5002";
        //4. 候选人
        String user = "wangwu";
        List<Task> list = taskService.createTaskQuery().taskCandidateUser(user).list();
        //Task task = list.get(0);

        System.out.println(list);
        //if(task != null){
        //    //5. 拾取任务
        //    taskService.claim(task.getId(),user);
        //    System.out.println("taskId:"+task.getId()+" 用户："+user+" 拾取任务完成");
        //
        //}
    }



}

